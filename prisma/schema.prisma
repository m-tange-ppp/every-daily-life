generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String    @id @db.Uuid
  name     String    @db.VarChar(20)
  image    String?   @db.Text
  bio      String?   @db.VarChar(100)  
  username String    @unique @db.VarChar(30)
  posts    Post[]
  likes    Like[]
  followers Follow[] @relation("following")
  following Follow[] @relation("followers")
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@index([username])
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(100)
  createdAt DateTime @default(now())
  authorId  String   @db.Uuid
  likes     Like[]
  replyToId Int?     
  replyTo   Post?    @relation("Replies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies   Post[]   @relation("Replies")
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String   @db.Uuid
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String   @db.Uuid
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    String   @db.Uuid
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}